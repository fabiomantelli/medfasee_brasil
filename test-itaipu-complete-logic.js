// Teste COMPLETO da l√≥gica do pmuService para PMU Itaipu
// Agora com IDs corretos de frequ√™ncia E tens√£o confirmados

const WEBSERVICE_BASE_URL = 'http://150.162.19.214:6156';

// IDs CONFIRMADOS da PMU Itaipu
const ITAIPU_IDS = {
  frequency: 1486,    // CONFIRMADO pelo usu√°rio - tem dados!
  dfreq: 1487,        // CONFIRMADO pelo usu√°rio
  voltageAMag: 1503,  // CONFIRMADO pelo usu√°rio
  voltageAAng: 1504   // CONFIRMADO pelo usu√°rio
};

async function testItaipuCompleteLogic() {
  console.log('üéØ TESTE FINAL: PMU Itaipu com IDs CORRETOS de frequ√™ncia E tens√£o');
  console.log('===============================================================\n');
  
  try {
    // Usar formato correto com milissegundos (descoberto pelo usu√°rio)
    const startTime = '2025-09-10 11:00:00';
    const endTime = '2025-09-10 11:00:00.001';  // SEGREDO: .001 milissegundos!
    
    console.log('üéØ USANDO FORMATO CORRETO COM MILISSEGUNDOS (.001)');
    console.log('üìÖ Intervalo:', startTime, 'at√©', endTime);
    console.log('üÜî IDs da Itaipu:');
    console.log('   Frequ√™ncia:', ITAIPU_IDS.frequency);
    console.log('   DFreq:', ITAIPU_IDS.dfreq);
    console.log('   Tens√£o Mag:', ITAIPU_IDS.voltageAMag);
    console.log('   Tens√£o Ang:', ITAIPU_IDS.voltageAAng);
    console.log('');
    
    // TESTE 1: Apenas frequ√™ncia (confirmado pelo usu√°rio)
     console.log('üß™ TESTE 1: Apenas IDs de frequ√™ncia');
     const freqIds = `${ITAIPU_IDS.frequency},${ITAIPU_IDS.dfreq}`;
     const freqUrl = `${WEBSERVICE_BASE_URL}/historian/timeseriesdata/read/historic/${freqIds}/${encodeURIComponent(startTime)}/${encodeURIComponent(endTime)}/json`;
    
    console.log('üåê URL frequ√™ncia:', freqUrl);
    
    const freqResponse = await fetch(freqUrl);
    console.log('üì° Status frequ√™ncia:', freqResponse.status);
    
    let freqData = null, dfreqData = null;
    if (freqResponse.ok) {
      const freqDataResponse = await freqResponse.json();
      const freqPoints = freqDataResponse.TimeSeriesDataPoints || [];
      console.log('üìä Pontos de frequ√™ncia:', freqPoints.length);
      
      freqData = freqPoints.find(dp => dp.HistorianID === ITAIPU_IDS.frequency);
      dfreqData = freqPoints.find(dp => dp.HistorianID === ITAIPU_IDS.dfreq);
      
      console.log('   Freq (1486):', freqData ? `${freqData.Value} Hz` : 'N√ÉO ENCONTRADO');
      console.log('   DFreq (1487):', dfreqData ? `${dfreqData.Value}` : 'N√ÉO ENCONTRADO');
    }
    
    console.log('');
    
    // TESTE 2: Apenas tens√£o
     console.log('üß™ TESTE 2: Apenas IDs de tens√£o');
     const voltIds = `${ITAIPU_IDS.voltageAMag},${ITAIPU_IDS.voltageAAng}`;
     const voltUrl = `${WEBSERVICE_BASE_URL}/historian/timeseriesdata/read/historic/${voltIds}/${encodeURIComponent(startTime)}/${encodeURIComponent(endTime)}/json`;
    
    console.log('üåê URL tens√£o:', voltUrl);
    
    const voltResponse = await fetch(voltUrl);
    console.log('üì° Status tens√£o:', voltResponse.status);
    
    let voltageAMag = null, voltageAAng = null;
    if (voltResponse.ok) {
      const voltDataResponse = await voltResponse.json();
      const voltPoints = voltDataResponse.TimeSeriesDataPoints || [];
      console.log('üìä Pontos de tens√£o:', voltPoints.length);
      
      voltageAMag = voltPoints.find(dp => dp.HistorianID === ITAIPU_IDS.voltageAMag);
      voltageAAng = voltPoints.find(dp => dp.HistorianID === ITAIPU_IDS.voltageAAng);
      
      console.log('   Tens√£o Mag (1503):', voltageAMag ? `${voltageAMag.Value} kV` : 'N√ÉO ENCONTRADO');
      console.log('   Tens√£o Ang (1504):', voltageAAng ? `${voltageAAng.Value}¬∞` : 'N√ÉO ENCONTRADO');
    }
    
    console.log('');
    
    // TESTE 3: Todos juntos
     console.log('üß™ TESTE 3: Todos os IDs juntos');
     const allIds = `${ITAIPU_IDS.frequency},${ITAIPU_IDS.dfreq},${ITAIPU_IDS.voltageAMag},${ITAIPU_IDS.voltageAAng}`;
     const allUrl = `${WEBSERVICE_BASE_URL}/historian/timeseriesdata/read/historic/${allIds}/${encodeURIComponent(startTime)}/${encodeURIComponent(endTime)}/json`;
    
    console.log('üåê URL completa:', allUrl);
    
    const allResponse = await fetch(allUrl);
    console.log('üì° Status completo:', allResponse.status);
    
    if (allResponse.ok) {
      const allData = await allResponse.json();
      const allPoints = allData.TimeSeriesDataPoints || [];
      console.log('üìä Pontos completos:', allPoints.length);
      
      // Se n√£o temos dados dos testes individuais, tentar extrair dos dados completos
      if (!freqData) freqData = allPoints.find(dp => dp.HistorianID === ITAIPU_IDS.frequency);
      if (!dfreqData) dfreqData = allPoints.find(dp => dp.HistorianID === ITAIPU_IDS.dfreq);
      if (!voltageAMag) voltageAMag = allPoints.find(dp => dp.HistorianID === ITAIPU_IDS.voltageAMag);
      if (!voltageAAng) voltageAAng = allPoints.find(dp => dp.HistorianID === ITAIPU_IDS.voltageAAng);
    }
    
    console.log('');
      
      console.log('üîç Dados extra√≠dos:');
      console.log('   Frequ√™ncia (1486):', freqData ? `${freqData.Value} Hz (Quality: ${freqData.Quality})` : '‚ùå N√ÉO ENCONTRADO');
      console.log('   DFreq (1487):', dfreqData ? `${dfreqData.Value} (Quality: ${dfreqData.Quality})` : '‚ùå N√ÉO ENCONTRADO');
      console.log('   Tens√£o Mag (1503):', voltageAMag ? `${voltageAMag.Value} kV (Quality: ${voltageAMag.Quality})` : '‚ùå N√ÉO ENCONTRADO');
      console.log('   Tens√£o Ang (1504):', voltageAAng ? `${voltageAAng.Value}¬∞ (Quality: ${voltageAAng.Quality})` : '‚ùå N√ÉO ENCONTRADO');
      console.log('');
      
      // Aplicar EXATAMENTE os mesmos filtros do pmuService
      const hasValidVoltageA = voltageAMag && voltageAAng && 
                              voltageAMag.Value > 0 && 
                              !isNaN(voltageAMag.Value) && 
                              !isNaN(voltageAAng.Value);
      
      const hasValidFreqData = freqData && freqData.Value > 0 && !isNaN(freqData.Value);
      
      const hasRealData = hasValidFreqData && hasValidVoltageA;
      
      console.log('üß™ FILTROS DO PMUSERVICE:');
      console.log('   hasValidFreqData:', hasValidFreqData ? '‚úÖ PASSOU' : '‚ùå FALHOU');
      console.log('   hasValidVoltageA:', hasValidVoltageA ? '‚úÖ PASSOU' : '‚ùå FALHOU');
      console.log('   hasRealData (ambos):', hasRealData ? '‚úÖ PASSOU' : '‚ùå FALHOU');
      console.log('');
      
      if (hasRealData) {
        console.log('üéâ SUCESSO TOTAL! PMU Itaipu PASSARIA em todos os filtros!');
        console.log('   ‚úÖ Tem dados de frequ√™ncia v√°lidos');
        console.log('   ‚úÖ Tem dados de tens√£o v√°lidos');
        console.log('   ‚úÖ Deveria aparecer VERDE no mapa!');
        console.log('');
        
        // Criar o measurement exato que seria gerado
        const measurement = {
          pmuId: 'S_PR_Foz_do_Iguacu_Itaipu_Ptec',
          pmuName: 'Itaipu_Ptec_Foz_do_Iguacu_PR',
          frequency: freqData.Value,
          dfreq: dfreqData?.Value || 0.0,
          timestamp: freqData.Time,
          quality: freqData.Quality,
          status: 'active',
          voltageA: {
            magnitude: voltageAMag.Value,
            angle: voltageAAng.Value
          }
        };
        
        console.log('üìã MEASUREMENT que seria criado:');
        console.log(JSON.stringify(measurement, null, 2));
        console.log('');
        
        console.log('üö® CONCLUS√ÉO: Se a PMU Itaipu ainda aparece vermelha, o problema √©:');
        console.log('   1. üïê Timing - dados chegam ap√≥s o filtro ser aplicado');
        console.log('   2. üîÑ Cache - dados antigos sendo usados');
        console.log('   3. üêõ Bug no c√≥digo - filtro n√£o sendo aplicado corretamente');
        console.log('   4. üåê Problema de rede - dados n√£o chegando ao frontend');
        
      } else {
        console.log('‚ùå FALHA! PMU Itaipu seria REJEITADA pelo filtro');
        console.log('   Motivos espec√≠ficos:');
        if (!hasValidFreqData) {
          console.log('   - Dados de frequ√™ncia inv√°lidos ou ausentes');
          if (freqData) console.log(`     Valor: ${freqData.Value}, V√°lido: ${freqData.Value > 0 && !isNaN(freqData.Value)}`);
        }
        if (!hasValidVoltageA) {
          console.log('   - Dados de tens√£o inv√°lidos ou ausentes');
          if (voltageAMag) console.log(`     Mag: ${voltageAMag.Value}, V√°lido: ${voltageAMag.Value > 0 && !isNaN(voltageAMag.Value)}`);
          if (voltageAAng) console.log(`     Ang: ${voltageAAng.Value}, V√°lido: ${!isNaN(voltageAAng.Value)}`);
        }
      }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    console.log('   A PMU Itaipu aparece vermelha devido a erro de conex√£o');
  }
}

console.log('üöÄ Iniciando teste COMPLETO da PMU Itaipu...');
console.log('');
testItaipuCompleteLogic();